service: () -> {
    completePaymentReserve: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {id:text; status:variant {Failed; Completed; Pending}; workerId:text; transactionDate:text; memo:nat64; employerId:text; projectId:text; payee:principal; payer:principal; amount:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createEmployerProfile: (record {userId:text; companyName:text; companyWebsite:text; industry:text}) -> (variant {Ok:record {id:text; totalHires:nat64; userId:text; createdAt:text; averageRating:nat64; updatedAt:text; totalJobsPosted:nat64; companyName:text; companyWebsite:text; industry:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createJobApplication: (record {portfolioItems:vec text; workerId:text; screeningAnswers:vec text; jobId:text; coverLetter:text}) -> (variant {Ok:record {id:text; status:variant {Rejected; Shortlisted; Hired; Pending}; portfolioItems:vec text; workerId:text; screeningAnswers:vec text; createdAt:text; jobId:text; coverLetter:text; updatedAt:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createJobPosting: (record {applicationDeadline:text; jobCategory:variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; projectDuration:text; title:text; screeningQuestions:vec text; preferredWorkerLocation:opt text; description:text; employerId:text; budget:record {currency:text; paymentType:variant {Hourly; FixedPrice}; amount:nat64}; requiredSkills:vec text}) -> (variant {Ok:record {id:text; applicationDeadline:text; jobCategory:variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; status:variant {Open; Closed; Filled}; projectDuration:text; title:text; screeningQuestions:vec text; preferredWorkerLocation:opt text; createdAt:text; description:text; updatedAt:text; employerId:text; budget:record {currency:text; paymentType:variant {Hourly; FixedPrice}; amount:nat64}; requiredSkills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createProject: (record {workerId:text; endDate:opt text; jobId:text; employerId:text; milestones:vec record {status:variant {Approved; Completed; Pending}; dueDate:text; description:text}}) -> (variant {Ok:record {id:text; status:variant {Cancelled; InProgress; Completed}; workerId:text; paymentStatus:variant {PartiallyPaid; FullyPaid; Pending}; endDate:opt text; jobId:text; employerId:text; startDate:text; milestones:vec record {status:variant {Approved; Completed; Pending}; dueDate:text; description:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createUser: (record {userType:text; fullName:text; email:text; address:text; phoneNumber:text}) -> (variant {Ok:record {id:text; userType:text; owner:principal; createdAt:text; fullName:text; email:text; updatedAt:text; isVerified:bool; address:text; phoneNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createWorkerProfile: (record {userId:text; education:vec record {endDate:opt text; institution:text; degree:text; fieldOfStudy:text; startDate:text}; workExperience:vec record {endDate:opt text; description:text; company:opt text; jobTitle:text; isInformalWork:bool; startDate:text}; languages:vec record {name:text; proficiencyLevel:text}; preferredJobCategories:vec variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; availability:text; portfolioUrl:opt text; certifications:vec text; skills:vec record {name:text; isVerified:bool; proficiencyLevel:nat64}; professionalSummary:text}) -> (variant {Ok:record {id:text; completedJobs:nat64; userId:text; createdAt:text; education:vec record {endDate:opt text; institution:text; degree:text; fieldOfStudy:text; startDate:text}; workExperience:vec record {endDate:opt text; description:text; company:opt text; jobTitle:text; isInformalWork:bool; startDate:text}; languages:vec record {name:text; proficiencyLevel:text}; preferredJobCategories:vec variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; averageRating:nat64; availability:text; updatedAt:text; portfolioUrl:opt text; totalEarnings:nat64; certifications:vec text; skills:vec record {name:text; isVerified:bool; proficiencyLevel:nat64}; professionalSummary:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getAllEmployerProfiles: () -> (variant {Ok:vec record {id:text; totalHires:nat64; userId:text; createdAt:text; averageRating:nat64; updatedAt:text; totalJobsPosted:nat64; companyName:text; companyWebsite:text; industry:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAllJobApplications: () -> (variant {Ok:vec record {id:text; status:variant {Rejected; Shortlisted; Hired; Pending}; portfolioItems:vec text; workerId:text; screeningAnswers:vec text; createdAt:text; jobId:text; coverLetter:text; updatedAt:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAllJobPostings: (nat64, nat64) -> (variant {Ok:vec record {id:text; applicationDeadline:text; jobCategory:variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; status:variant {Open; Closed; Filled}; projectDuration:text; title:text; screeningQuestions:vec text; preferredWorkerLocation:opt text; createdAt:text; description:text; updatedAt:text; employerId:text; budget:record {currency:text; paymentType:variant {Hourly; FixedPrice}; amount:nat64}; requiredSkills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAllProjects: () -> (variant {Ok:vec record {id:text; status:variant {Cancelled; InProgress; Completed}; workerId:text; paymentStatus:variant {PartiallyPaid; FullyPaid; Pending}; endDate:opt text; jobId:text; employerId:text; startDate:text; milestones:vec record {status:variant {Approved; Completed; Pending}; dueDate:text; description:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAllUsers: () -> (variant {Ok:vec record {id:text; userType:text; owner:principal; createdAt:text; fullName:text; email:text; updatedAt:text; isVerified:bool; address:text; phoneNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAllWorkerProfiles: () -> (variant {Ok:vec record {id:text; completedJobs:nat64; userId:text; createdAt:text; education:vec record {endDate:opt text; institution:text; degree:text; fieldOfStudy:text; startDate:text}; workExperience:vec record {endDate:opt text; description:text; company:opt text; jobTitle:text; isInformalWork:bool; startDate:text}; languages:vec record {name:text; proficiencyLevel:text}; preferredJobCategories:vec variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; averageRating:nat64; availability:text; updatedAt:text; portfolioUrl:opt text; totalEarnings:nat64; certifications:vec text; skills:vec record {name:text; isVerified:bool; proficiencyLevel:nat64}; professionalSummary:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getEmployerProfileById: (text) -> (variant {Ok:record {id:text; totalHires:nat64; userId:text; createdAt:text; averageRating:nat64; updatedAt:text; totalJobsPosted:nat64; companyName:text; companyWebsite:text; industry:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getJobApplicationById: (text) -> (variant {Ok:record {id:text; status:variant {Rejected; Shortlisted; Hired; Pending}; portfolioItems:vec text; workerId:text; screeningAnswers:vec text; createdAt:text; jobId:text; coverLetter:text; updatedAt:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getJobPostingById: (text) -> (variant {Ok:record {id:text; applicationDeadline:text; jobCategory:variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; status:variant {Open; Closed; Filled}; projectDuration:text; title:text; screeningQuestions:vec text; preferredWorkerLocation:opt text; createdAt:text; description:text; updatedAt:text; employerId:text; budget:record {currency:text; paymentType:variant {Hourly; FixedPrice}; amount:nat64}; requiredSkills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getProjectById: (text) -> (variant {Ok:record {id:text; status:variant {Cancelled; InProgress; Completed}; workerId:text; paymentStatus:variant {PartiallyPaid; FullyPaid; Pending}; endDate:opt text; jobId:text; employerId:text; startDate:text; milestones:vec record {status:variant {Approved; Completed; Pending}; dueDate:text; description:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getUserById: (text) -> (variant {Ok:record {id:text; userType:text; owner:principal; createdAt:text; fullName:text; email:text; updatedAt:text; isVerified:bool; address:text; phoneNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getUserByPrincipal: () -> (variant {Ok:record {id:text; userType:text; owner:principal; createdAt:text; fullName:text; email:text; updatedAt:text; isVerified:bool; address:text; phoneNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getWorkerProfileById: (text) -> (variant {Ok:record {id:text; completedJobs:nat64; userId:text; createdAt:text; education:vec record {endDate:opt text; institution:text; degree:text; fieldOfStudy:text; startDate:text}; workExperience:vec record {endDate:opt text; description:text; company:opt text; jobTitle:text; isInformalWork:bool; startDate:text}; languages:vec record {name:text; proficiencyLevel:text}; preferredJobCategories:vec variant {DataScience; WebDevelopment; GraphicDesign; MobileDevelopment; ContentWriting; Other; ArtificialIntelligence}; averageRating:nat64; availability:text; updatedAt:text; portfolioUrl:opt text; totalEarnings:nat64; certifications:vec text; skills:vec record {name:text; isVerified:bool; proficiencyLevel:nat64}; professionalSummary:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    reserveWorkerPayment: (record {workerId:text; employerId:text; projectId:text; amount:nat64}) -> (variant {Ok:record {id:text; status:variant {Failed; Completed; Pending}; workerId:text; transactionDate:text; memo:nat64; employerId:text; projectId:text; payee:principal; payer:principal; amount:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
}
